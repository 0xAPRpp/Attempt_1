/*With in the Main loop - find a word - compare the size of the word with the input word - if matched
Compare the letters - needs a sub loop
(bubble sort algorithm)set an expectation(before loop) and change the expectation if the requirement is not met at the first failure with in the loop under an if condition
check for the expectation after the loop - This will identify similar words.
When the requirement is met which is computed after the first sub loop, use another loop to change the letters of the word to '*'.
*/
# include <iostream>
# include <string>
# include <array>
# include <cctype>

int main()
{	
	std::string text{};
	std::string word{};

	const std::string separators{ " ,;:.\"!?'\n-" };
	std::getline(std::cin, text, '*');
	std::cin >> word;

	bool replace_word{};

	size_t start{}, end{};	
	for (size_t i{}; i < text.length(); i = end+1)
	{		
		if ((start = text.find_first_not_of(separators, i)) == std::string::npos)
			break;
		else
			if (end = text.find_first_of(separators, start) == std::string::npos)
			{				
				end = text.length();									
			}
			else
			{
				end = text.find_first_of(separators, start);								
			}		
		if (word.length() == (text.substr(start, end - start)).length())
		{
			replace_word = true;
			for (size_t j{}; j < word.length(); j++)
			{
				if (std::tolower(word[j]) != std::tolower((text.substr(start, end - start))[j]))
				{
					replace_word = false;
					break;
				}
			}
			if (replace_word)
				for (size_t k{ start }; k < (start + word.length()); k++)
					text[k] = '*';
		}			
	}

	std::cout << text << std::endl;
		
	system("pause");
	return 0;
}
