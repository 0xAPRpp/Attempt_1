/*Exercise 7-2. Write a program that reads text entered over an arbitrary number of lines.
Find and record each unique word that appears in the text and record the number of
occurrences of each word.Output the words and their occurrence counts.Words and
counts should align in columns.The words should align to the left; the counts to the
right.There should be three words per row in your table.*/
# include <iostream>
# include <string>
# include <vector>
# include <cctype>
# include <iomanip>
using namespace std;
int main()
{
	std::string text{}; //text to be stored ended by *.
	std::getline(std::cin, text, '*'); //text input

	std::vector<std::string> words{};  //words to be stored
	std::vector<size_t> word_count{};  //count for each word

	std::string separators{"-_()/\\\n \'\",.:;!?"};

	//loop to find and store each word
	size_t start{}, end{};
	for (size_t i{}; i < text.length();) //loops until we reach the end of the string text.
	{
		start = text.find_first_not_of(separators,i); //finding the starting index for a word
		cout << start << endl;
		end = text.find_first_of(separators, start+1); // finding the first separator immediately after the found word.
		cout << end << endl;
		if (std::size(words) == 0)
		{
			words.push_back(text.substr(start, end - start)); // storing the word into the vector
			word_count.push_back(1); //storing the count for the stored word.
			std::cout << words[0] << " " << word_count[0] << endl;
		}
		else
		{
			bool matched{};
			for (size_t i{}; i < std::size(words); i++) //loop to compare the current word that is not yet stored with stored words.
			{
				matched = false;
				if (text.substr(start, end - start) == words[i])
				{
					word_count[i]++;
					matched = true;
					break;
				}				
			}
			if (matched == false)
			{
				words.push_back(text.substr(start, end - start));
				word_count.push_back(1);
			}
		}
		i = end + 1;
	}

	for (size_t i{}; i < 3; i++)
	{
		std::cout << std::left << setw(15) << "Word" << std::right << setw(5) << "Count" << " ";
	}
	cout << endl;
	for (size_t i{}; i < std::size(words); i++)
	{
		std::cout << std::left << setw(15) << words[i] << std::right << setw(5) << word_count[i] << " ";
		if ((i + 1) % 3 == 0)
			cout << endl;
	}

	cout << endl;

	system("pause");
	return 0;
}
