//code won't compile unless the standard is c++17 or above and Build -> Configuration Manager -> x64

/*The gist of proper dynamic memory allocation is to reuse memory without allowing dangling pointers. 
In order to reuse memory you should be done with whatever that is stored in that memory. 
In order to avoid a dangling pointer, you have to reset the dynamically allocated raw pointer pointing to it, this may not be needed if the pointer can be discarded, 
i.e, when the function finishes the execution the pointer will be removed from the stack and discarded. 
You should also discard all the other pointers storing that address which again will automatically be discarded if they are defined within the function 
when the function execution ends. 
We are passing a raw pointer from the smart pointer - sp_int_arr using the get() function to the called function. 
This passes the raw pointer. This means a raw pointer is now pointing to a memory location in the free store. 
This will be discarded after the function execution ends and as a result there are no raw pointers that can point to this memory location. 
This means that it is okay to pass the raw pointer inside a smart pointer as long as that pointer does not linger around in the program when it is not needed, 
however it is very important to understand to not let it get out of control by allowing the address 
to hang around at different places that will eventually make it difficult to trace. This is the reason to avoid copies also.*/

# include <iostream>
# include <array>
# include <vector>
# include <iomanip>
# include <cctype>
# include <string>
# include <sstream>
#include <string_view>

void print_data(int int_arr[], size_t length = 1, std::string_view name = "Default", size_t width = 5, size_t perline = 3);

int main()
{

	size_t size{};
	std::cin >> size;

	std::unique_ptr<int[]> sp_int_arr{ std::make_unique<int[]>(size) };

	for (size_t i{}; i < size; i++)
	{
		std::cin >> sp_int_arr[i];
	}

	std::string title{};
	std::cin >> title;

	size_t width{};
	std::cin >> width;

	size_t perline{};
	std::cin >> perline;

	print_data(sp_int_arr.get(), size);
	print_data(sp_int_arr.get(), size, title);
	print_data(sp_int_arr.get(), size, title, width);
	print_data(sp_int_arr.get(), size, title, width, perline);
	print_data(sp_int_arr.get(), size, title, perline);
	
}



void print_data(int int_arr[], size_t length, std::string_view name, size_t width, size_t perline)
{
	std::cout << name << std::endl;
	for (size_t i{}; i < length; i++)
	{
		std::cout << std::setw(width) << *(int_arr++);
		if ((i+1) % perline == 0)
			std::cout << std::endl;
	}
	std::cout << std::endl;
}
