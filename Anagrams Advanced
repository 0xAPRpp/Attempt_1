
# include <iostream>
# include <string>
# include <vector>
# include <cctype>
# include <iomanip>
using namespace std;
int main()
{
	std::string word1{}; 
	std::string word2{};

	//using words with spaces
	std::getline(std::cin, word1);
	std::getline(std::cin, word2);

	//removing spaces from words
	//go through the letters in the word and remove the spaces
	for (size_t i{}; i < word1.length(); i++)
	{
		if (std::isspace(word1[i]))
		{
			word1.erase(i, 1);
			i--; // this is to reset the counter after a space is deleted so that i reads the next character, which otherwise would be ignored. But considering a character is expected after a space
			     // this should work, however this will not cover corner cases where a space is followed by a space
		}
	}
	cout << word1;
	for (size_t i{}; i < word2.length(); i++)
	{
		if (std::isspace(word2[i]))
		{
			word2.erase(i, 1);
			i--;
		}
	}
	cout << word2 << '1' << endl;

	//Checking if the words are anagrams
	//Take the first letter from word 1 and compare it against all the letters in word 2 - you need 2 loops - sub loop to iterate over the letters in word 2 and main loop to iterate in word1.
	//Compare the 2 words and check for equality.

	bool anagram{};
	if (word1.length() == word2.length())
	{
		for (size_t i{}; i < word1.length();) // main loop
		{
			anagram = false;
			for (size_t j{}; j < word2.length(); j++) // sub loop
			{				
				if (word1[i] == word2[j])
				{
					anagram = true;
					word1.erase(i, 1);
					cout << word1 << endl;
					word2.erase(j, 1);
					cout << word2 << endl;
				}
			}
			if(anagram == false)
			{
				cout << "Not anagrams" << endl;
				return 0;
			}
		}
	}
	else
	{
		cout << "Not anagrams" << endl;
		return 0;
	}

	if (word1 == word2)
		cout << " You entered: " << word1 + " and " + word2 + " that are anagrams" << endl;

	system("pause");
	return 0;
}
